<project name="SER321 Assignment 3" 
	default="targets" 
	basedir="." 
	xmlns="antlib:org.apache.tools.ant">
	<taskdef resource="cpptasks.tasks" />
	<taskdef resource="net/sf/antcontrib/antcontrib.properties" />

	<!-- set global properties for this build -->
	<property name="src" value="src" />
	<property name="build" value="classes" />
	<property name="lib" value="lib" />
	<property name="hostId" value="localhost" />
	<property name="regPort" value="2222" />
	<property name="java.src.dir" value="src/client/java"/>
	<property name="cpp.src.dir" value="src/client/cpp" />
	<property name="build" value="classes" />
	<property name="dist.dir" value="bin" />
	<property name="obj.dir" value="obj" />
	<property name="doc.java" value="doc.java" />
	<property name="doc.cpp" value="doc.cpp" />

	<property environment="env" />
	<property name="user.name" value="${env.USERNAME}" />

	<path id="compile.classpath">
		<pathelement location="${build}" />
		<pathelement location="${lib}/org.json-20140503.jar" />
	</path>

	<target name="targets">
		<echo>targets are: &#xA;	targets, clean, prepare, build.cpp.client, &#xA;	execute.server, and execute.client
		</echo>
		<echo message="java home is: &#xD;
			${java.home}" />
		<echo> os family is: ${os.name} 
		</echo>
		<echo message = 
			"start server with: &#xD;
			ant execute.server -DhostId=192.168.2.2 -DregPort=2222"
      	/>
		<echo message = 
         	"start client with: &#xD;
			ant execute.client -DhostId=192.168.2.2 -DregPort=2222"
      	/>
	</target>

	<target name="clean">
		<!-- Delete the ${build} directory tree -->
		<delete dir="${build}" />
		<delete dir="${doc.java}" failonerror="false" />
		<delete dir="${doc.cpp}" failonerror="false" />
		<delete dir="${obj.dir}" failonerror="false" />
		<delete dir="${dist.dir}" failonerror="false" />
		<delete file="docs.jar" failonerror="false" />
		<delete file="waypoints.json" failonerror="false" />
	</target>

	<target name="prepare">
		<mkdir dir="${build}" />
		<mkdir dir="${doc.cpp}" />
		<mkdir dir="${doc.java}" />
		<mkdir dir="${dist.dir}" />
		<mkdir dir="${obj.dir}" />

		<!-- Detects the User or Username-->
		<if>
			<isset property="env.USERNAME" />
			<then>
				<echo message="detected username is: ${env.USERNAME}" />
			</then>
			<elseif>
				<isset property="env.USER" />
				<then>
					<echo message="detected user is: ${env.USER}" />
				</then>
			</elseif>
		</if>

		<!-- Displays system info to console. -->
		<echo message="host name is: ${os.name}" />
		<echo message="host arch is: ${os.arch}" />
		<echo message="host version is: ${os.version}" />
		<echo message="base directory is: ${basedir}" />

		<!-- Platform identification -->
		<condition property="build.host.islinux">
			<!-- Is Unix, but NOT Mac -->
			<and>
				<os family="unix" />
				<not>
					<contains string="${os.name}" substring="mac" casesensitive="false" />
				</not>
			</and>
		</condition>

		<!-- If islinux is true or "set", then build.host.platform is linux -->
		<condition property="build.host.platform" value="linux">
			<isset property="build.host.islinux" />
		</condition>

		<condition property="build.host.ismac">
			<!-- Is Unix AND Mac -->
			<and>
				<os family="unix" />
				<contains string="${os.name}" substring="mac" casesensitive="false" />
			</and>
		</condition>

		<!-- If ismac is true or "set", then build.host.platform is mac -->
		<condition property="build.host.platform" value="mac">
			<isset property="build.host.ismac" />
		</condition>

		<!-- Is Windows -->
		<condition property="build.host.iswindows">
			<os family="windows" />
		</condition>

		<!-- If iswindows is true or "set", then build.host.platform is windows -->
		<condition property="build.host.platform" value="windows">
			<isset property="build.host.iswindows" />
		</condition>

		<!-- fails build -->
		<fail unless="build.host.platform" message="Building on ${os.name} is not supported" />
		<echo message="build.host.platform is: ${build.host.platform}" />

		<if>
			<isset property="build.host.ismac" />
			<then>
				<echo message="detected a mac host" />
				<property name="compiler.arg" value="-std=c++0x" />
				<property name="include.base" value="/" />
				<property name="include.paths" value="opt/local/include,usr/local/include" />
				<property name="linkflag" value="-Wl,/usr/lib/libjsoncpp.dylib,/usr/lib/libc.dylib" /> <!-- This should be correct for Mac -->
				<property name="lib.list" value="stdc++,fltk" />
				<property name="lib.dir" value="/opt/local/lib" />
			</then>
			<elseif>
				<isset property="build.host.iswindows" />
				<then>
					<echo message="detected a windows host" />
					<property name="compiler.arg" value="-std=c++0x" />
					<property name="lib.list" value="fltk,stdc++" />
				</then>
			</elseif>
			<elseif>
				<isset property="build.host.islinux" />
				<then>
					<echo message="detected a linux host" />
					<property name="compiler.arg" value="-std=c++0x" />
					<property name="lib.list" value="fltk,stdc++" />
					<property name="lib.dir" value="/usr/lib64/" />
					<!-- For Redhat 64-bit OS's. -->
					<property name="include.paths" value="usr/include,usr/local/include" />
					<property name="include.base" value="/" />
					<property name="linkflag" value="-Wl,/lib64/libjsoncpp.so,-lm" /> <!-- This is for my Fedora 64-bit -->
				</then>
			</elseif>
		</if>
	</target>

	<target name="build.cpp.client" depends="prepare">
		<echo message="include.paths rooted at / are ${include.paths}" />
		<echo message="compiler arg is: ${compiler.arg}" />
		<if>
			<equals arg1="${build.host.platform}" arg2="windows" />
			<then>
				<cc outtype="executable" subsystem="console" outfile="${dist.dir}/waypoint.exe" objdir="${obj.dir}">
					<compilerarg value="${compiler.arg}" />
					<libset libs="${lib.list}" />
					<fileset dir="${cpp.src.dir}" includes="WaypointGUI.cpp,WaypointClientCPP.cpp" />
				</cc>
			</then>
			<else>
				<cc outtype="executable" subsystem="console" outfile="${dist.dir}/waypoint" objdir="${obj.dir}">
					<compilerarg value="${compiler.arg}" />
					<includepath>
						<dirset dir="${include.base}" includes="${include.paths}" />
					</includepath>
					<linkerarg value="${linkflag}"/>
					<fileset dir="${cpp.src.dir}" includes="WaypointGUI.cpp,WaypointClientCPP.cpp,Waypoint.cpp"/>
					<libset dir="${lib.dir}" libs="${lib.list}" />
					
				</cc>
			</else>
		</if>
	</target>

	<target name="execute.client" depends="prepare" description="Start client">
		<echo message="user.dir is: ${user.dir}" />
		<echo message="command line client: java -cp classes -Djava.security.policy=policyClient RMIClient ${hostId} ${regPort}" />
		<java classname="client.java.WaypointGUI" fork="yes">
			<classpath refid="compile.classpath" />
			<sysproperty key="java.security.policy" value="policyClient" />
			<arg value="${hostId}" />
			<arg value="${regPort}" />
		</java>
	</target>

	<target name="execute.server" depends="prepare" description="Using parallel task, start server and client">
		<!-- Compiles Java into classes -->
		<javac srcdir="${src}" includeantruntime="false" destdir="${build}">
			<classpath refid="compile.classpath" />
		</javac>

		<!-- Compiles RMI into classes -->
		<rmic classname="server.WaypointServerImpl" base="${build}">
			<classpath refid="compile.classpath" />
		</rmic>

		<parallel>
			<exec dir="${basedir}" executable="${java.home}/bin/rmiregistry.exe" osfamily="windows">
				<arg value="${regPort}" />
				<env key="CLASSPATH" path="${basedir}/${build}" />
			</exec>
			<exec dir="${basedir}" executable="rmiregistry" osfamily="unix">
				<arg value="${regPort}" />
				<env key="CLASSPATH" path="${basedir}/${build}" />
			</exec>
			<sequential>
				<sleep seconds="10" />
				<java classname="server.WaypointServerImpl" fork="yes">
					<sysproperty key="java.security.policy" value="policyServer" />
					<sysproperty key="java.rmi.server.hostname" value="${hostId}" />
					<arg value="${hostId}" />
					<arg value="${regPort}" />
					<classpath refid="compile.classpath" />
				</java>
			</sequential>
		</parallel>
	</target>

</project>
